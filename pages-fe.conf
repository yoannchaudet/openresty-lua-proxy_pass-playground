worker_processes  1;

events {
    worker_connections  1024;
}

error_log  /var/log/nginx-errors.log;

http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       80;
        server_name  localhost;

        set $gh_pages_public "";
        set $gh_pages_host "";
        set $gh_pages_port "";
        set $gh_pages_proxy_uri "";

        # Allow headers containing _
        underscores_in_headers On;

        location /pages {
            content_by_lua '
                ngx.header["X-Who-Am-I"] = "pages-fe"

                ngx.header["Content-Type"] = "text/plain";

                -- Enable CORS for Pages (public only)
                if ngx.var.http_x_github_pages_public == nil or ngx.var.http_x_github_pages_public == "1" then
                    ngx.header["Access-Control-Allow-Origin"] = "*"
                end

                -- Set security headers for Private Pages
                if ngx.var.http_x_github_pages_public ~= nil and ngx.var.http_x_github_pages_public == "0" then
                    ngx.header["Referrer-Policy"] = "strict-origin-when-cross-origin"
                    if ngx.var.http_strict_transport_security == nil then
                        ngx.header["Strict-Transport-Security"] = "max-age=31536000"
                    end
                    ngx.header["X-Frame-Options"] = "SAMEORIGIN"
                    ngx.header["X-Content-Type-Options"] = "nosniff"
                end

                -- Proxy logic
                ngx.var.gh_pages_host = "localhost"
                ngx.var.gh_pages_port = "2512"
                ngx.var.gh_pages_proxy_uri = "/dfs"
            ';
            proxy_pass http://$gh_pages_host:$gh_pages_port$gh_pages_proxy_uri;
        }
    }
}
